<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplicationName" xml:space="preserve">
    <value>ExcelFileInspector</value>
  </data>
  <data name="MessageOpenProjectUrl" xml:space="preserve">
    <value>このアプリケーションのプロジェクトURLを開く</value>
  </data>
  <data name="ImportantNotice" xml:space="preserve">
    <value>重要なお知らせ</value>
  </data>
  <data name="MessageFatalError" xml:space="preserve">
    <value>致命的なエラーが発生しました｡
このアプリケーションを終了します｡
エラーの詳細な情報を表示しますか?</value>
  </data>
  <data name="InspectionSettings" xml:space="preserve">
    <value>検査設定</value>
  </data>
  <data name="Preset" xml:space="preserve">
    <value>プリセット</value>
  </data>
  <data name="TargetFileKeyword" xml:space="preserve">
    <value>対象ファイルキーワード</value>
  </data>
  <data name="InspectionMethod" xml:space="preserve">
    <value>検査方法</value>
  </data>
  <data name="SheetName" xml:space="preserve">
    <value>シート名</value>
  </data>
  <data name="Cell" xml:space="preserve">
    <value>セル</value>
  </data>
  <data name="Condition" xml:space="preserve">
    <value>条件</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>値</value>
  </data>
  <data name="InspectionFile" xml:space="preserve">
    <value>検査ファイル</value>
  </data>
  <data name="ExecuteInspection" xml:space="preserve">
    <value>検査実施</value>
  </data>
  <data name="InspectionResult" xml:space="preserve">
    <value>検査結果</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>ファイル名</value>
  </data>
  <data name="Result" xml:space="preserve">
    <value>結果</value>
  </data>
  <data name="MessageResultInspectionNGNotEqual" xml:space="preserve">
    <value>"{0}"と等しくありませんでした｡</value>
  </data>
  <data name="MessageResultInspectionNGEmpty" xml:space="preserve">
    <value>空です｡</value>
  </data>
  <data name="MessageResultInspectionOK" xml:space="preserve">
    <value>問題は見つかりませんでした｡</value>
  </data>
  <data name="ClearInspectionFile" xml:space="preserve">
    <value>検査ファイルクリア</value>
  </data>
  <data name="MessageStatusInspectionMethodEmpty" xml:space="preserve">
    <value>検査方法が設定されていません｡</value>
  </data>
  <data name="MessageStatusInspectionFileEmpty" xml:space="preserve">
    <value>検査ファイルが指定されていません｡</value>
  </data>
  <data name="MessageStatusAlreadyInspection" xml:space="preserve">
    <value>準備が完了しました｡｢検査実施｣ボタン押下で検査を行います｡</value>
  </data>
  <data name="MessageStatusCompleteInspection" xml:space="preserve">
    <value>検査が完了しました｡</value>
  </data>
  <data name="MessageStatusNowInspection" xml:space="preserve">
    <value>検査を行っています｡({0}/{1})</value>
  </data>
</root>